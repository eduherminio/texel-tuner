#include <array>
#include <cmath>
#include <iomanip>

using u64 = uint64_t;

constexpr int32_t Pack(const int16_t mg, const int16_t eg)
{
    return ((int32_t)eg << 16) + (int32_t)mg;
}

constexpr int16_t UnpackMG(const int32_t packed)
{
    return (int16_t)packed;
}

constexpr int16_t UnpackEG(const int32_t packed)
{
    return (int16_t)((packed + 0x8000) >> 16);
}

constexpr int PieceOffset(bool isWhite)
{
    return 6 - (6 * isWhite);
}

std::array<int, 6> phaseValues = {0, 1, 1, 2, 4, 0};

constexpr static int EvalNormalizationCoefficient = 90;

constexpr static int PSQTBucketCount = 11;

constexpr static std::array<int, 64> PSQTBucketLayout =
    {
        9, 9, 9, 9, 10, 10, 10, 10,
        9, 9, 9, 9, 10, 10, 10, 10,
        7, 7, 6, 6, 6, 6, 8, 8,
        7, 7, 6, 6, 6, 6, 8, 8,
        4, 4, 4, 6, 6, 5, 5, 5,
        4, 4, 4, 1, 1, 5, 5, 5,
        0, 0, 1, 1, 1, 3, 3, 3,
        0, 0, 1, 2, 1, 3, 3, 3};

constexpr static std::array<std::array<int, 12>, PSQTBucketCount> PieceValue = {
    {
        {
            +80, +332, +302, +449, +1038,  // 0
            +132, +435, +410, +767, +1390, // 0
        },
        {
            +74, +325, +317, +431, +1018,  // 0
            +130, +454, +397, +787, +1400, // 0
        },
        {
            +66, +269, +269, +308, +702,   // 0
            +130, +385, +323, +641, +1149, // 0
        },
        {
            +90, +375, +365, +522, +1175,  // 0
            +119, +469, +420, +834, +1545, // 0
        },
        {
            +61, +226, +225, +258, +604,   // 0
            +136, +368, +315, +637, +1134, // 0
        },
        {
            +76, +276, +273, +330, +720,   // 0
            +121, +386, +328, +681, +1225, // 0
        },
        {
            +70, +287, +306, +346, +667,   // 0
            +127, +395, +336, +700, +1296, // 0
        },
        {
            +45, +230, +219, +230, +591,   // 0
            +141, +344, +301, +616, +1059, // 0
        },
        {
            +75, +277, +281, +332, +745,   // 0
            +120, +378, +320, +673, +1198, // 0
        },
        {
            +82, +361, +356, +506, +1137,  // 0
            +128, +475, +429, +841, +1556, // 0
        },
        {
            +85, +383, +370, +546, +1209,  // 0
            +119, +485, +438, +866, +1623, // 0
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGamePawnTable = {
    {
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -112, -4, -78, -45, -81, -136, -245, -255,
            3, 57, 110, 92, 93, 72, 31, -14,
            55, 71, 60, 27, 34, 24, -9, -31,
            55, 52, 56, 55, 26, -1, -19, -48,
            74, 80, 46, 12, -14, -18, -52, -68,
            57, 113, 45, 6, -30, -25, -61, -59,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -58, -62, -73, -66, -198, -163, -188, -275,
            26, 45, 74, 63, 48, 124, 49, 1,
            31, 39, 40, 55, 46, 44, 13, -1,
            18, 25, 39, 54, 37, 35, 8, -17,
            26, 15, 30, 24, 18, 20, 1, -25,
            21, 28, 21, 5, -4, 18, 8, -21,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -2, 57, -3, -217, -168, -204, -219, -221,
            -20, 73, 120, -65, 12, 41, 29, -3,
            39, 32, 78, 31, 67, 30, -11, -7,
            8, 35, 53, 27, 67, 19, 38, 6,
            12, 36, 59, 13, 66, 17, -7, -16,
            5, 50, 38, -26, 28, 27, -5, -18,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -54, -73, -71, -62, -68, -99, -262, -220,
            22, 29, 57, 66, 89, 134, 100, 71,
            -7, 2, 15, 20, 48, 50, 32, 37,
            -21, -10, 4, 19, 30, 33, 21, 21,
            -25, -24, -9, -4, 10, 21, 36, 33,
            -21, -23, -24, -13, -0, 28, 46, 16,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -141, 53, 23, -31, -52, -140, -91, -107,
            -41, 65, 131, 131, 6, -24, -27, 1,
            -15, 81, 112, 74, 43, -20, -37, -19,
            -35, 47, 68, 46, 39, 2, -33, -69,
            -43, 30, 83, 37, 2, -18, -36, -52,
            -74, -10, 62, 91, 35, -12, -64, -70,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -151, -125, -58, 60, 1, -35, -103, -137,
            -56, -5, 19, 33, 59, 145, 93, 38,
            -33, -8, -4, 11, 67, 101, 75, 5,
            -47, -41, 2, 11, 41, 74, 33, -26,
            -52, -28, -3, 18, 48, 66, 32, -46,
            -62, -35, -17, 22, 25, 42, 9, -56,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -56, -24, 9, -6, -4, 5, -34, -69,
            -55, -19, 14, 71, 36, 17, -15, -59,
            -36, -24, 31, 61, 56, 33, -1, -39,
            -37, 18, 43, 42, 81, 51, 7, -32,
            -46, 17, 46, 74, 118, 59, 18, -40,
            -102, -89, -4, 84, -2, -26, -53, -120,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -104, 26, -9, 29, 10, -44, -50, -51,
            -88, -16, 91, 52, 20, -27, -49, -57,
            -36, 31, 72, 31, 9, 23, -64, -6,
            27, 45, 116, 67, 28, 2, -37, -33,
            66, 117, 78, -26, 68, 19, -8, -56,
            -51, 147, 4, 33, -10, -130, -46, -210,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -43, -44, -8, -1, 45, 20, 4, -69,
            -48, -57, -3, 39, 38, 42, 45, -29,
            -41, -49, -15, 10, 65, 68, 31, -47,
            -10, -35, -11, 21, 71, 90, 78, 12,
            -36, -28, 31, 56, 116, 98, 88, 23,
            -77, -124, -81, -112, 109, -76, -27, -128,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            58, 69, 47, 12, -14, -12, -45, -64,
            59, 46, 41, 15, 14, -7, -36, -54,
            48, 39, 41, 49, 34, 9, -20, -53,
            73, 59, 44, 44, 52, 27, -12, -37,
            133, 93, 35, 71, 53, 77, 43, -23,
            10, -90, -106, -57, -130, -139, -217, -277,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -14, -18, -11, -7, 0, 37, 54, 22,
            -18, -22, -4, 9, 19, 25, 44, 35,
            -14, -9, 11, 25, 32, 41, 24, 21,
            1, 5, 12, 27, 53, 61, 37, 36,
            20, 34, 63, 62, 74, 139, 97, 48,
            -91, -126, -108, -43, -47, -132, -247, -258,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGamePawnTable = {
    {
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            84, 47, 115, -36, -30, -3, 5, 58,
            40, 34, 8, -73, -78, -45, 17, 47,
            24, 13, -10, -13, -22, -11, 12, 21,
            -10, -14, -27, -23, -20, -13, -7, 15,
            -26, -40, -16, -16, 1, -12, 1, 7,
            -25, -29, -3, 30, -21, -2, 20, 23,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            23, 11, 28, -25, 11, 14, 29, 62,
            27, 20, -4, -57, -32, -22, 1, 17,
            22, 13, -5, -31, -14, -17, 5, 10,
            4, 3, -15, -16, -11, -12, -3, -3,
            -4, -8, -13, -7, -5, -11, -13, -6,
            2, 0, 1, 13, 21, -5, -5, 6,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            10, 35, 10, 48, 97, -23, -1, 46,
            33, 38, -11, -25, -1, -10, 9, 15,
            18, 15, -21, -67, -34, -13, 20, 13,
            11, -16, -26, -37, -21, -26, -33, -15,
            -0, -21, -18, -15, -14, -9, -15, -6,
            12, -11, -13, 51, 18, -1, 3, 2,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            36, 37, 15, -31, -53, -9, 28, 53,
            44, 38, 3, -62, -63, -44, 2, 17,
            38, 26, 1, -23, -25, -29, -1, -8,
            14, 12, -7, -9, -11, -16, -13, -23,
            8, 7, -0, 3, 6, -0, -16, -27,
            19, 16, 13, 11, 30, 15, -6, -18,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            33, -14, 4, -33, 2, 8, 4, 37,
            24, 20, -7, -50, -24, -14, -6, 4,
            50, 16, -1, -17, -14, -6, 14, 9,
            40, 17, -3, -5, -19, -16, -4, 8,
            26, -5, -17, -26, -18, -16, -8, -2,
            28, 0, -17, -25, -6, -4, 11, 21,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            40, 23, 3, -84, -59, 9, 25, 27,
            30, 15, -11, -26, -15, -23, 4, 1,
            27, 20, 9, -12, -9, -14, 9, 10,
            20, 16, -2, -2, -5, -15, 2, 8,
            12, -3, -7, -7, -15, -10, -13, 7,
            27, 10, 4, -29, 9, -6, -9, 8,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            24, 5, -8, -12, -5, -3, 0, 18,
            15, 2, -9, -23, -15, -11, -7, 8,
            27, 22, -2, -15, -8, -8, 8, 10,
            35, 18, 3, -11, -14, -6, 11, 11,
            23, 3, -12, -33, -33, -17, -9, 7,
            39, 18, -3, -73, -23, 5, 14, 34,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            32, -21, 2, -36, -39, -2, -7, 14,
            34, 27, -18, -20, -13, -14, -16, 1,
            51, 8, -4, -5, -9, -33, -2, 0,
            43, 22, -14, -23, 4, 6, 1, 10,
            16, 0, -15, -21, -12, -12, -7, 1,
            49, -11, 6, -62, 7, 20, 10, 53,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            17, 15, -3, -27, -13, -2, -5, 6,
            11, 3, -3, -15, -3, -9, -8, 5,
            24, 15, -1, -6, -6, -8, 4, 25,
            27, 17, 10, -1, -13, -4, 7, 18,
            27, -2, -13, -31, -44, -12, 1, 12,
            31, 20, 9, -49, -90, 16, 14, 33,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            -19, -17, -8, 5, 13, 3, 20, 32,
            -21, -15, -14, -11, -6, -6, 2, 8,
            -10, -8, -18, -25, -16, -11, 1, 15,
            2, -3, -7, -28, -23, -8, 16, 32,
            24, 12, -16, -51, -26, -26, 5, 31,
            30, 27, 29, -24, -26, 25, 42, 67,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            19, 15, 9, 8, 28, 13, -6, -13,
            10, 6, 2, 1, 5, 1, -16, -18,
            22, 11, -5, -12, -13, -15, -9, -13,
            40, 18, 6, -20, -26, -20, 0, 4,
            50, 34, -18, -57, -60, -45, -4, 19,
            51, 57, 16, -59, -75, -11, 12, 56,
            0, 0, 0, 0, 0, 0, 0, 0 //

        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGameKnightTable = {
    {
        {
            -109, 89, 128, -10, -120, -57, -223, -69,
            -36, -65, 65, 35, 41, 169, -20, 18,
            -22, 50, 113, 80, 100, 88, 80, 7,
            -11, 39, 49, 109, 62, 62, 31, -15,
            -11, 14, 18, 28, 52, 29, 28, -16,
            -19, -18, 25, 24, 40, -10, -24, -68,
            -35, -57, 14, -19, -1, -14, -41, -92,
            -101, -68, -75, -59, -42, -77, -49, -37 //
        },
        {
            -184, -204, -195, -97, 42, -142, -16, -167,
            -82, -8, 40, 23, 35, 116, -48, 50,
            -54, 80, 62, 93, 135, 132, 75, -39,
            28, 32, 65, 107, 56, 89, 30, 51,
            -6, 2, 46, 29, 60, 31, 15, -5,
            -23, 5, 21, 20, 55, 16, 9, -25,
            -28, -9, 13, 15, 12, 26, -11, -29,
            -130, -11, -20, -23, -26, -17, -21, -98 //
        },
        {
            -194, -160, -123, 232, -197, -48, 274, 86,
            -232, 16, 85, -64, 58, 23, -204, -83,
            12, -36, 8, 162, 23, 67, 87, -52,
            -32, 5, 21, 135, 66, 112, 66, 118,
            56, -42, 45, 8, 78, 34, 68, 4,
            -14, -19, 37, 43, 68, 26, 51, -7,
            -68, -31, -82, 21, -6, 32, 82, 20,
            -227, -19, 64, -2, -73, -32, -38, -312 //
        },
        {
            -210, -208, -88, -71, 77, -62, -33, -78,
            -25, -18, 36, 64, 29, 131, 33, 33,
            -26, 25, 66, 70, 135, 174, 80, 31,
            -16, 7, 43, 68, 39, 80, 28, 42,
            -26, -10, 22, 16, 38, 24, 31, -11,
            -54, -25, -8, 13, 23, 4, 2, -25,
            -65, -40, -25, -3, -3, 0, -15, -13,
            -66, -43, -58, -32, -24, -12, -22, -55 //
        },
        {
            -43, -37, -171, 20, -49, -355, -245, -266,
            121, -149, -66, 18, -23, -56, -152, 10,
            112, 38, 129, 124, 96, -0, -63, 122,
            124, 15, 83, 75, 205, 110, 120, -40,
            84, -12, 67, 90, 89, 20, -29, 82,
            -58, 24, 66, 106, 118, 3, 29, -55,
            -179, 39, 61, 59, 29, -5, 1, -125,
            21, -71, -18, 31, -64, -10, -83, -114 //
        },
        {
            -342, -158, -120, -46, -3, -216, -90, -211,
            -113, -54, -53, -48, 99, 33, 21, -7,
            -118, 54, 62, 118, 130, 163, 113, 81,
            -74, 23, 38, 98, 118, 154, 165, 213,
            -53, -6, 63, 78, 116, 115, 52, 56,
            -65, -31, 13, 39, 69, 115, 69, 20,
            -229, -113, 9, 5, 13, 100, -18, 65,
            -42, -42, -77, -122, -26, -26, -20, -155 //
        },
        {
            -394, 3, -168, -87, -96, -55, -81, -192,
            -43, 17, -32, 21, -4, 22, -56, -12,
            19, -40, 30, 47, 53, 60, -24, -91,
            -27, 28, 72, 76, 79, 63, 117, 24,
            -32, 70, 76, 151, 156, 153, 117, 8,
            -92, 87, 87, 165, 98, 124, 124, 43,
            -87, -8, -15, 0, -41, 22, 11, -184,
            -192, -103, -151, 16, 100, 6, 6, -47 //
        },
        {
            301, 28, -180, 138, -267, -51, -62, 69,
            31, 79, 21, -35, 48, 95, -59, 176,
            -77, -64, 57, -9, 64, 20, -20, 73,
            -131, 44, -25, 79, -12, 89, -131, -16,
            186, 88, 81, 76, 80, -34, 151, -210,
            42, 125, 167, 169, 229, -51, 4, -105,
            -32, 29, 85, -28, 147, -176, 223, -254,
            -232, -217, -81, 32, -204, -464, -125, 29 //
        },
        {
            -329, -103, -146, -168, -71, 17, -18, 94,
            -82, -13, -53, 2, -3, 66, 12, -18,
            -172, -81, -20, 45, 77, 95, 55, -57,
            -69, -70, 49, 48, 154, 78, 84, 112,
            -71, -16, 89, 99, 127, 135, 187, 82,
            -101, -68, -21, 156, 101, 199, 191, 111,
            -249, -128, -101, 88, 54, 124, 144, 192,
            -219, -532, 63, -122, 226, 195, -117, -334 //
        },
        {
            -35, -49, -33, -15, -49, -44, -39, -63,
            -43, -65, -2, 10, 4, 9, -12, -55,
            -40, 9, 38, 36, 13, 4, -2, -21,
            11, 23, 44, 51, 67, 31, 55, -16,
            -4, 40, 79, 117, 53, 89, 33, 66,
            -32, 58, 75, 120, 135, 115, 92, 5,
            -47, 26, 72, 68, 77, 72, -38, 44,
            -200, -224, -130, -53, 78, -126, -294, -189 //
        },
        {
            -100, -29, -54, -36, -19, -18, -18, -67,
            -53, -41, -21, 2, 3, 7, -10, -10,
            -43, -19, -2, 23, 31, 15, 14, -20,
            -27, 4, 23, 28, 40, 31, 25, -4,
            -12, 13, 40, 60, 38, 81, 31, 34,
            -6, 28, 64, 85, 132, 156, 77, 43,
            -39, -18, 23, 64, 50, 116, 11, 23,
            -198, -102, -56, -11, -5, -87, -160, -129 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGameKnightTable = {
    {
        {
            -93, -99, -43, -34, 53, 36, 35, -97,
            -6, -13, -39, -1, -18, -62, 23, -14,
            -10, -32, -7, 27, 51, -21, -17, 5,
            -17, 12, 58, 52, 50, 86, 39, 16,
            -1, -16, 55, 61, 66, 28, 49, 2,
            -6, 22, 7, 43, 40, 17, 13, 17,
            7, 14, -32, 19, -8, -34, -8, 17,
            -35, 6, 30, -0, -17, 25, -50, -248 //
        },
        {
            -114, 27, 45, 20, 2, -7, 16, -125,
            -8, -6, 8, 11, 7, -4, 21, -44,
            12, -5, 31, 29, 14, 7, -3, -24,
            -7, 18, 32, 33, 50, 35, 16, -3,
            2, 24, 37, 44, 37, 24, 26, -14,
            -21, 3, 8, 27, 17, 5, -5, -2,
            -45, 3, -2, -4, -4, -9, -19, -41,
            -10, -57, -10, -6, -9, -17, -40, -24 //
        },
        {
            -66, 61, -7, -96, 83, 16, -119, -314,
            18, 1, -10, 27, -26, 37, 48, -61,
            8, 28, 77, -49, 64, 39, -26, 13,
            44, 36, 56, -4, 28, 28, 4, -97,
            -34, 40, 28, 45, 28, 21, -59, -62,
            8, 4, 17, 28, 73, 8, -9, 37,
            35, 41, 29, 25, -1, 10, -55, -4,
            43, -28, -67, -24, 26, -66, -14, 35 //
        },
        {
            -40, 32, 19, 3, -31, -26, -30, -145,
            -11, 8, 11, 17, 7, -33, -26, -45,
            13, 13, 43, 36, 10, -18, 1, -21,
            15, 26, 49, 58, 61, 44, 35, -19,
            4, 20, 50, 51, 56, 34, 18, -0,
            -16, 6, 21, 47, 32, 16, -7, -21,
            -20, -4, 1, 10, 4, -23, -13, -13,
            -92, -38, -16, -11, -7, -32, -38, -73 //
        },
        {
            -103, -7, 15, -3, -7, 12, 83, -22,
            -59, 17, 20, 8, 16, -22, 44, -32,
            -13, -4, -11, 16, 15, 16, 22, -47,
            -11, 10, 28, 43, 5, 24, -27, -26,
            -12, 35, 24, 29, 38, 24, 14, -41,
            14, 17, -10, 11, 5, 21, -17, -27,
            26, 8, 7, -10, -25, -3, -11, 23,
            -25, 9, -4, -27, 21, -39, -13, -60 //
        },
        {
            -64, -27, 24, 24, 9, 37, -31, -53,
            4, -2, 36, 29, 4, -6, 4, -28,
            -6, -18, 31, 16, 21, 2, 2, -13,
            4, 12, 42, 25, 31, 19, -13, -62,
            -6, 18, 33, 29, 20, 11, 10, 1,
            -45, 7, 20, 40, 10, -22, -3, -1,
            -6, -4, -2, 9, 9, -9, 15, -53,
            -53, -72, 13, -3, 1, -13, -28, 23 //
        },
        {
            13, -62, 22, 5, 20, -24, -23, -16,
            -21, 3, 12, 6, 7, 15, -1, -26,
            -31, 14, 12, 20, 16, 8, 13, 17,
            -0, 6, 27, 24, 23, 23, -7, -11,
            6, 8, 28, 15, 8, 11, -2, 0,
            -4, 4, 16, 8, 19, 3, -18, -16,
            -12, 2, 11, 18, 19, 7, 5, 16,
            -83, -31, 25, -13, -20, 12, -75, -54 //
        },
        {
            -105, -28, 37, -54, 23, -67, -10, -44,
            -43, 13, 43, 42, 11, -11, -1, -125,
            22, 29, 36, 62, 15, 14, 7, -92,
            39, 24, 46, 56, 56, 24, 26, -2,
            -0, -1, 71, 31, 46, 73, -37, 7,
            -23, 10, 3, -11, -5, 35, -20, 1,
            -36, 12, -21, 20, -21, 36, -48, 19,
            -165, 19, -10, 40, -7, 69, -13, -114 //
        },
        {
            -39, -43, 11, 42, 1, -37, -30, -46,
            32, -39, 9, 6, 28, -14, 1, 1,
            -18, -5, 32, 28, 25, -11, 9, 35,
            -6, 28, 14, 49, 16, 33, -0, -41,
            7, 23, 8, 43, 39, 53, -9, 1,
            -18, 22, 36, 9, 21, -15, -36, -49,
            13, 20, 44, -20, 15, -19, -59, -73,
            24, 72, -16, -8, -58, -59, -4, -75 //
        },
        {
            -49, 5, -4, -25, -4, -33, -15, -38,
            3, 32, 6, -3, 0, 28, -23, -21,
            -4, -11, 10, 43, 44, 28, -5, -9,
            -8, 6, 44, 38, 43, 57, 31, -12,
            -10, 24, 36, 19, 70, 37, 21, -7,
            -7, -7, 35, 28, 15, 5, -20, 12,
            -3, -13, -37, 3, -25, -25, 6, -39,
            -101, -23, 27, -36, -51, -25, 48, -109 //
        },
        {
            -37, -50, -22, -7, -12, -24, -39, -48,
            -29, -5, 8, 4, 9, -14, -26, -15,
            -28, 10, 31, 39, 35, 13, -3, -26,
            8, 15, 49, 53, 57, 40, 8, -8,
            11, 27, 51, 64, 62, 48, 35, 4,
            -9, 21, 44, 32, 16, 12, 4, -36,
            -11, 15, 8, 4, 1, -22, -34, -55,
            -83, -20, -5, -5, -19, -15, 7, -136 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGameBishopTable = {
    {
        {
            -41, -323, -149, -131, -265, -140, -66, -47,
            -54, -106, 23, -1, -62, 46, 185, 0,
            -4, 33, 27, 19, 20, 70, 18, 20,
            25, 26, 28, 37, 53, 26, 8, -10,
            16, 61, 25, 70, 15, -2, 13, 38,
            4, 59, 48, 30, 23, 9, -0, -13,
            48, 117, 68, 35, 4, 26, -1, -46,
            93, 35, 41, -19, 26, 1, 23, -107 //
        },
        {
            -62, -68, -52, -88, -164, -124, -32, -71,
            -94, -0, -4, -33, 2, -10, 1, 8,
            1, 18, 8, 50, 27, 60, 35, 44,
            15, 17, 25, 36, 26, 7, 12, -11,
            7, -5, 9, 33, 9, -2, 4, 20,
            31, 21, 21, 14, 14, 8, 0, 9,
            22, 43, 34, 11, 11, 14, 25, 8,
            53, 20, 12, -10, 17, -9, -10, -13 //
        },
        {
            -77, -36, 167, -23, 227, -271, -57, -201,
            -116, -35, -56, -152, 199, -49, -184, -13,
            35, 126, -61, 92, -31, -86, 53, 35,
            42, 42, -16, -24, 110, 53, 56, 15,
            14, -50, 38, -61, -3, 26, 5, 42,
            38, 3, 9, 2, 18, 28, -43, 57,
            1, 63, 10, 52, -36, -27, -11, -46,
            138, 46, 10, -25, -31, -11, -5, -17 //
        },
        {
            -12, -39, -71, -94, -55, -48, -9, 19,
            -41, -1, 9, -21, 11, 19, -10, -30,
            -7, 4, 16, 30, 25, 97, 59, 37,
            -10, -8, 5, 31, 17, 20, 8, -5,
            -16, -12, -18, 6, 7, -9, -16, 11,
            2, -8, -2, -12, -4, -7, 2, 24,
            10, 8, 6, -9, -9, 8, 31, 18,
            15, 19, 2, -28, -16, 8, 23, 20 //
        },
        {
            -304, 109, -147, -294, -148, -290, 129, -202,
            55, -28, -78, -103, -198, 82, -19, -122,
            17, 205, 186, 28, 70, -18, 100, -112,
            25, 7, 71, 186, 153, 86, 9, 127,
            -103, 66, 55, 95, 86, 28, 25, 33,
            -146, 14, 52, 75, 59, 67, -105, 106,
            53, -64, -32, -0, 44, 107, 49, -127,
            -169, 228, 45, 7, -36, 53, -162, 13 //
        },
        {
            -112, -142, -146, -33, 42, -129, -39, 29,
            -99, -122, -73, 43, 19, 6, -97, -117,
            -32, -28, 4, 65, 91, 140, 139, 106,
            -9, 12, 43, 100, 128, 87, 31, 26,
            -22, -40, 26, 95, 86, 72, 20, -10,
            -35, -5, 15, 38, 58, 27, -0, -18,
            -20, -8, -24, -22, -16, -30, 17, 29,
            -17, -41, 9, -3, -26, -15, -2, -69 //
        },
        {
            -8, -51, -31, -70, 35, -24, 18, 10,
            -27, -39, 2, -16, -7, 18, -11, -32,
            -74, -2, -2, 31, 36, 11, 4, -9,
            -9, 8, 21, 69, 73, 10, 11, -54,
            9, 10, 80, 104, 73, 43, 47, 8,
            -16, 34, 29, 101, 77, 112, 48, 38,
            -105, -48, 4, 13, -0, -39, -101, 12,
            5, -6, -87, -36, -112, 2, -48, -144 //
        },
        {
            -158, -190, 22, 12, 20, 4, 114, 46,
            0, 42, 139, -11, 76, -113, 50, 128,
            -38, 232, 66, 55, 60, -5, 20, -91,
            22, -10, 107, 114, 38, 14, -115, 139,
            -126, 109, 121, 95, 10, 78, 48, -76,
            -95, 175, 182, -14, 53, -61, -294, 80,
            -28, -181, 24, 22, -17, -26, -29, -148,
            -112, 103, -151, 92, -339, -119, 254, -417 //
        },
        {
            -21, 42, -55, 29, -6, -62, -58, -26,
            69, -14, -44, -38, 27, 13, 17, 25,
            -18, -40, -30, 2, 24, 20, 72, 31,
            -126, -6, 38, 70, 110, 43, 86, 67,
            -93, -32, 6, 88, 94, 66, 84, 79,
            -167, -52, -18, 19, 47, 149, 31, 143,
            -7, -51, -51, -111, 26, -12, -11, -116,
            -26, -91, -201, 10, -3, -37, -33, 31 //
        },
        {
            22, 9, -6, 19, -9, 2, -13, 0,
            52, 63, 48, 2, 7, 21, -1, 11,
            30, 21, 33, 31, 5, -5, 0, 0,
            6, 16, 29, 57, 38, -16, -1, 3,
            -21, 32, 28, 47, 40, 49, 9, 21,
            1, 1, 24, 32, 25, 66, 30, 38,
            -32, -51, -9, -72, -45, 44, -4, 30,
            -86, -45, -139, -97, -75, -182, -10, -123 //
        },
        {
            3, 26, -5, -6, -1, -0, -1, 38,
            25, 6, 14, -14, 8, 12, 46, 11,
            -3, 6, -9, 6, -11, 7, 4, 32,
            -2, -14, 1, 22, 30, -8, -1, 11,
            -16, 7, 4, 41, 20, 31, 5, 0,
            -0, 14, 18, 25, 24, 81, 53, 33,
            -16, 4, -14, -49, 16, 7, 5, -16,
            -53, -50, -71, -115, -87, -57, -41, -37 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGameBishopTable = {
    {
        {
            43, 106, 58, 29, 121, 32, 37, 28,
            -24, 68, -37, -7, 2, -19, -39, 4,
            21, 8, 10, 10, -36, -8, 29, 27,
            1, -9, 12, 15, -12, 7, 6, 39,
            21, -26, -7, -38, 8, 6, -14, -21,
            -10, -50, -6, -22, -8, -24, -26, -11,
            -51, -40, -32, -31, -13, -56, 2, 21,
            3, -15, -11, -9, -36, -16, -22, 15 //
        },
        {
            29, 11, 3, 28, 29, 25, 11, 19,
            35, 4, -2, -2, -13, 16, 6, -7,
            23, 9, 2, -16, -26, -5, 5, 2,
            5, 2, -14, -7, -9, 5, -2, 27,
            -13, 14, -8, -10, -13, 1, -3, -8,
            9, -12, -15, -13, -9, -18, -9, -14,
            -3, -19, -12, -11, -13, -18, -14, 8,
            7, 4, -7, 10, -13, -3, 17, -5 //
        },
        {
            39, 27, -30, 3, 29, 81, 11, 17,
            11, -6, 64, 8, -24, -17, 0, -5,
            -0, -27, 55, -33, -10, 23, 35, 59,
            32, -33, 37, 17, -30, 31, -41, 52,
            27, 18, 8, 9, 19, -7, 24, -26,
            6, -27, 30, 6, 11, -30, -2, -20,
            1, -26, -23, -18, 20, 37, 10, -102,
            -129, -83, -8, -41, -7, -6, 21, -68 //
        },
        {
            11, 13, 16, 46, 20, 17, -2, -24,
            17, -2, -2, 1, -5, -12, -2, -8,
            20, 9, -6, -22, -3, -15, -0, 28,
            17, 9, 3, 11, 6, -2, 3, 12,
            4, 5, 13, 9, -0, -3, -4, -10,
            5, 2, 1, 6, 6, -4, -12, -3,
            -1, -13, -24, -3, 1, -5, -5, -18,
            -9, -27, -8, -2, 11, -4, -31, -34 //
        },
        {
            61, -25, 8, 29, 42, 36, 3, 60,
            -18, 2, -8, 16, 8, -31, 8, 32,
            26, -37, -41, -7, -15, 9, -3, 33,
            17, -0, -21, -47, -35, -9, 6, -3,
            38, -10, -27, -19, -32, -20, -15, -9,
            73, -13, -15, -36, -27, -11, 0, -46,
            56, 8, 9, -3, -7, -36, -30, 16,
            72, -12, 9, -5, -8, -12, -1, 19 //
        },
        {
            50, 39, 33, 15, -1, 20, 12, -4,
            25, 17, 17, -7, -21, -16, 30, 27,
            10, 9, -2, -29, -13, -26, -11, -4,
            6, -4, -18, -22, -29, -25, -2, 8,
            -2, 2, -11, -25, -20, -18, -6, 25,
            4, -12, -15, -18, -30, -16, -4, 26,
            12, -2, 3, 11, -3, -2, -17, -2,
            -12, 13, -7, 1, 15, 13, 1, 15 //
        },
        {
            5, 48, 6, 14, -9, 7, -14, -3,
            39, 7, 3, -2, 3, -13, -0, 6,
            28, 3, -9, -23, -28, -9, -12, 15,
            14, -7, -10, -25, -31, -15, -2, 12,
            8, 2, -32, -36, -30, -15, -8, 13,
            22, -12, -15, -38, -20, -23, 1, 12,
            23, 9, -6, -7, -10, 6, 21, 12,
            -2, 16, 26, 13, 26, 2, 8, 38 //
        },
        {
            46, 54, -32, 5, -19, -11, -14, -17,
            54, -3, -17, -0, -19, -1, -24, -47,
            16, -47, -36, -23, -23, 24, -33, 4,
            14, -9, -40, -26, -32, -25, 9, 1,
            48, -29, -28, -18, 0, -15, -2, 32,
            41, -46, -16, -16, -20, 18, 101, -3,
            -19, 32, -3, -29, -13, -19, 14, -15,
            71, -10, 53, 46, 74, 2, -65, 104 //
        },
        {
            7, 4, 17, -16, 12, 13, 4, -17,
            -1, 1, 3, 6, -13, -24, -5, 13,
            -4, -4, 4, -1, 3, -17, -12, 5,
            23, -13, -10, -23, -33, -12, -23, -12,
            12, 20, -8, -14, -24, -13, -9, 11,
            48, 19, -0, -21, -17, -29, -15, 10,
            -9, 13, 16, 21, 3, -15, -15, 11,
            6, 31, 65, 3, 13, 3, -21, 32 //
        },
        {
            -5, 14, 17, -9, -9, 2, -16, -3,
            14, -33, -22, -10, -7, -33, 6, -38,
            -9, -11, -18, -13, -0, -1, -11, -4,
            14, -13, -11, -12, -8, 3, 15, -8,
            13, -12, -17, -8, -5, -15, 7, 19,
            30, 4, -11, -28, -0, 3, 23, -1,
            -12, 14, -18, 4, 7, -0, 10, 18,
            38, -18, 8, 13, 33, 21, 33, 70 //
        },
        {
            -18, 13, -13, -5, -14, 2, -3, -44,
            -1, -13, -12, -7, -6, -23, -11, -16,
            5, 8, 7, 2, 11, -5, -17, -4,
            6, -1, 7, 3, 3, -5, -8, -19,
            11, 0, -2, 12, -3, -5, -2, 12,
            13, 4, 0, -17, -1, -15, 0, 21,
            6, -1, -3, 17, -24, -6, -12, 2,
            43, 20, 20, 25, 28, 10, 22, 3 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGameRookTable = {
    {
        {
            -23, -59, -6, -7, -48, 69, 12, 12,
            61, 45, 65, 66, -29, 80, 10, 58,
            21, -3, -26, 10, 16, -32, 132, 38,
            9, 38, 29, 9, -10, -15, 51, -4,
            -11, 28, 9, -3, -41, -73, -39, -16,
            -29, -6, 15, -22, -26, -5, -31, -33,
            -43, 9, -18, -10, -11, -31, -25, -38,
            -55, -14, -12, 2, -10, -13, 1, -19 //
        },
        {
            -16, -65, 19, -36, -18, 67, 79, 51,
            17, 8, 16, 42, 38, 44, 33, 59,
            14, -19, 17, 6, 61, 42, 81, 44,
            -36, -15, -19, -36, 16, 17, 25, 11,
            -22, -35, -33, -23, 2, -32, -18, -30,
            -28, -22, 3, -27, -34, -24, 7, -28,
            -26, -26, -21, -17, -18, -21, -3, -33,
            -9, -16, -17, -11, 5, -14, 5, 19 //
        },
        {
            -69, -392, -102, 173, -153, -202, -38, 50,
            -58, 94, 52, -17, 117, -19, -5, 167,
            -97, 42, -99, 11, -53, 121, -82, -66,
            -83, 31, -35, -68, -8, 162, 11, 69,
            -10, 37, 21, 57, 33, 82, -61, 59,
            -80, -19, -29, 20, 3, 54, -16, 52,
            45, 49, 7, -33, -14, 114, 6, 56,
            -1, -51, 11, 23, 19, 40, 44, 25 //
        },
        {
            7, 20, 2, 19, 29, 52, 48, 41,
            -22, -18, 13, 19, 1, 75, 109, 133,
            -37, -7, -8, -12, 41, 76, 163, 109,
            -47, -43, -40, -18, -21, 12, 25, 13,
            -55, -56, -49, -39, -35, -26, 12, -16,
            -59, -58, -53, -29, -30, -14, 30, 9,
            -54, -55, -29, -26, -14, -6, 35, 12,
            -28, -26, -25, -13, -6, -9, 6, -29 //
        },
        {
            -200, -122, -30, -83, -22, -37, -86, -201,
            112, 56, 111, 88, 21, -5, -44, 15,
            19, 20, 49, 2, -113, 81, 12, 82,
            -3, 45, 38, 60, 21, -114, -78, -73,
            -7, -21, 2, 22, 74, 68, -0, -131,
            129, -64, -16, -1, 49, 2, 26, -59,
            137, 5, 99, 19, -54, 53, 60, -47,
            -12, 56, 7, 3, -31, 24, 15, -26 //
        },
        {
            -161, -75, -28, -1, 47, -35, -101, -10,
            16, 21, 49, 123, 91, 106, 95, 57,
            -32, 12, 41, 17, 110, 65, 60, 80,
            -104, -51, -66, 41, 14, 47, 47, 43,
            -106, -60, -45, 13, -15, 16, -16, 27,
            -38, -54, -36, 1, 18, 24, 29, -66,
            -101, -15, -17, -25, -6, -13, -14, -11,
            -29, -21, -12, 2, 19, 31, -10, 13 //
        },
        {
            -32, -15, -39, -32, -13, 1, 16, 11,
            -104, -82, -13, -28, -2, -16, 17, 19,
            -32, -10, -11, -22, -52, -18, 5, -48,
            -48, -72, -78, 14, 18, -17, 34, -24,
            -18, -58, 25, 49, 31, -10, 17, 21,
            19, 21, 7, 25, 110, 71, 84, -15,
            17, 91, 40, 107, 49, 11, 89, 67,
            -22, -41, -28, -16, -31, 4, -17, -23 //
        },
        {
            1, 23, -41, 51, 44, 23, 2, 3,
            12, -33, 77, 6, 56, -3, 36, -117,
            30, -140, 54, -146, 44, 64, -69, -156,
            -120, -154, -44, -1, 20, 244, -16, -121,
            -52, -87, -19, 90, 4, -31, 77, -87,
            -101, 119, 116, 85, 100, 21, 34, 82,
            4, 221, 124, -44, 149, -18, 5, 118,
            -192, 42, -83, -107, 73, -57, -85, -129 //
        },
        {
            -30, -39, -28, -31, 2, -3, 0, 9,
            -118, -93, -51, -35, -21, 36, 12, -60,
            -71, -73, -64, -47, -25, 32, -27, -9,
            -102, -84, -48, -29, 21, 21, -9, -64,
            -104, -58, 9, 35, 1, 65, 90, 38,
            -2, 11, -12, 75, 47, 147, 204, 124,
            24, -4, 27, 112, -19, 225, 63, 160,
            -173, -41, 20, -26, 23, -2, 69, -97 //
        },
        {
            -58, -22, -18, -1, -1, 0, 14, -9,
            -32, -1, 4, -17, -9, -14, -16, -49,
            -22, -25, -50, -10, -46, -63, -11, -46,
            -24, 39, -39, -16, -39, -34, -20, -27,
            19, -22, -13, 13, -28, 26, -9, -0,
            39, 19, 51, 29, 32, 35, 65, 42,
            30, 27, 76, 44, 70, 57, 30, 36,
            19, -105, 21, 52, -51, 30, -20, 48 //
        },
        {
            -20, -24, -22, -16, -6, -9, -8, -12,
            -49, -37, -29, -24, -11, -1, 32, -23,
            -61, -55, -53, -42, -25, -24, 26, -0,
            -59, -59, -48, -37, -25, -31, 10, -14,
            -38, -33, -30, -7, -10, 8, 29, 15,
            -25, -4, -17, -8, 37, 79, 98, 53,
            -16, -29, 7, 34, 19, 80, 67, 115,
            21, 14, 9, 7, 60, 38, 92, 89 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGameRookTable = {
    {
        {
            17, 55, 46, 27, 38, -11, 18, 12,
            -44, 15, 20, -12, 50, -13, 15, -17,
            -29, 7, 30, -1, -10, 1, -32, -9,
            -20, -13, 8, 5, -8, 4, -24, -7,
            -4, 3, -6, -1, 23, 12, -16, -14,
            -18, 19, -10, 11, -3, -27, -20, -27,
            -7, -5, 13, 12, -1, -17, 4, -12,
            12, -8, 14, 0, -7, -19, -18, 0 //
        },
        {
            25, 48, 27, 37, 37, 7, 3, 10,
            17, 30, 32, 19, 12, -1, 15, -5,
            8, 12, 9, -5, -17, -17, -16, -18,
            19, 12, 25, 19, -8, -6, -8, -7,
            16, 11, 16, 7, -10, -9, -4, -2,
            -0, -1, -20, -19, -8, -2, -34, -19,
            -4, -4, -3, -19, -18, -17, -29, -20,
            -13, -5, 4, -9, -17, -23, -22, -40 //
        },
        {
            63, 167, 91, -18, 91, 92, 63, 52,
            16, 21, 18, 36, 8, 4, -6, -16,
            17, 2, 39, -15, -5, -18, 1, 16,
            31, -2, -16, 32, -1, -83, -34, -54,
            -6, -10, -14, -15, 12, -26, -11, -10,
            36, -18, -6, 12, -32, -50, 28, -29,
            -22, -43, -18, 19, 1, -51, 19, -66,
            -40, 20, -34, -96, -9, -28, -70, -36 //
        },
        {
            16, 19, 28, 19, 18, 20, 33, 13,
            31, 36, 34, 26, 28, 2, -11, -31,
            22, 15, 18, 15, -7, -27, -53, -45,
            28, 25, 22, 11, -0, -8, -12, -14,
            20, 18, 17, 10, 1, -4, -20, -21,
            7, 13, 5, 3, -7, -19, -46, -32,
            1, 8, -1, -2, -15, -26, -40, -55,
            7, -4, 4, -6, -18, -11, -31, -27 //
        },
        {
            63, 50, 34, 45, 24, 4, 32, 76,
            -20, -1, -3, -11, -11, 1, 8, -7,
            3, 8, -6, 9, 11, -26, 1, -31,
            3, 7, 2, -16, -20, 33, 8, 13,
            19, 3, 4, -20, -18, -38, -19, 25,
            -27, 23, -21, -10, -18, -17, -40, -8,
            -38, 22, -23, -14, 9, -27, -41, 10,
            4, -14, -3, 5, 16, -17, -14, 1 //
        },
        {
            50, 32, 20, 10, 7, 39, 53, 12,
            10, 10, 7, -26, -12, -14, -10, -0,
            13, 1, -8, 0, -26, -7, -8, -25,
            36, 11, 25, -5, -2, -8, -10, -7,
            22, 2, 6, -10, -9, -22, -4, -12,
            4, 6, -11, -14, -31, -20, -33, 14,
            39, 5, 2, -4, -10, -10, 1, 1,
            2, -15, -10, -7, -16, -25, 12, -21 //
        },
        {
            4, 4, 17, 9, -12, -15, -24, -17,
            32, 27, 7, -5, -13, -2, -13, -14,
            14, -1, -7, -11, -6, -14, -21, 1,
            19, 20, 15, -20, -19, -4, -11, -10,
            11, 28, 1, -18, -11, -10, -3, -5,
            10, 7, -2, -12, -37, -19, -15, 10,
            16, -5, 5, -24, 5, 12, -15, -9,
            21, 32, 25, 14, 10, 8, 19, 18 //
        },
        {
            3, -9, 34, -12, -26, -30, 4, -12,
            -16, 40, -25, -3, -42, -17, -21, 32,
            5, 82, -16, 51, -14, -47, -7, 20,
            58, 40, 17, 11, -13, -101, -12, -5,
            35, 51, 10, -8, -8, -7, -37, 21,
            27, -27, -30, -27, -53, -1, -7, -15,
            7, -50, -25, 40, -42, 3, 3, -27,
            61, -26, 34, 49, 8, 27, 24, 22 //
        },
        {
            -7, 3, -3, 6, -6, -5, -0, -15,
            40, 25, 14, -8, 10, -19, -17, 18,
            14, 20, 19, 8, 2, -23, 4, 4,
            28, 26, 6, 3, -8, -20, -24, 2,
            26, 14, -2, -11, -3, -5, -21, -42,
            4, 5, 2, -15, -11, -32, -54, -29,
            7, 15, 17, -25, 20, -41, -12, -46,
            54, 27, -0, 10, 0, 14, -9, 45 //
        },
        {
            11, -6, 9, -13, -22, -30, -36, -7,
            -16, -14, -8, -6, -26, -20, -19, -7,
            3, -0, 12, -14, 8, 2, -40, -10,
            -5, -7, 11, 7, 2, -1, -23, -4,
            3, 23, 17, -2, 13, -12, 3, -6,
            -11, 8, -7, -0, -16, -4, -16, -8,
            14, 19, 7, 19, 4, 7, 4, 21,
            3, 55, 21, 11, 49, 3, 30, 17 //
        },
        {
            3, -5, 1, -7, -16, -11, -16, -38,
            -3, -2, -2, -6, -17, -25, -56, -34,
            7, -0, 8, 8, -12, -17, -40, -36,
            20, 17, 14, 7, 2, 4, -11, -16,
            23, 18, 21, 10, -2, -3, -13, -9,
            23, 14, 23, 9, -7, -30, -20, -15,
            27, 38, 35, 25, 26, 2, 3, -27,
            8, 22, 26, 26, 0, 18, 3, 3 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGameQueenTable = {
    {
        {
            6, -4, 29, -4, -12, 19, 152, 100,
            -31, -6, 15, -77, -37, 58, 32, -10,
            -41, -36, -6, 0, 52, 74, 133, 43,
            -22, -31, 31, -9, 3, 4, 6, 39,
            4, 5, -11, 2, -1, -20, -20, -26,
            -84, -17, -24, -23, -12, -19, 1, -41,
            -39, -40, 7, 17, 5, 7, -5, 22,
            -60, -41, -10, -6, -17, 6, -32, -1 //
        },
        {
            -50, -80, 22, -166, -21, -62, 40, -27,
            -14, -41, -21, -65, -81, -0, 6, 42,
            -22, -35, -29, 28, 29, 69, 96, 101,
            -16, -20, -10, -15, -2, 9, 30, 26,
            8, -22, 3, 3, -6, -1, 13, 15,
            -2, 16, -5, 6, 13, 5, 17, 25,
            -22, 12, 33, 31, 24, -0, 43, 48,
            25, -2, 3, 16, 1, -39, -18, 38 //
        },
        {
            -53, 80, 144, 22, 120, -297, -121, -29,
            13, -26, 14, -119, -148, 23, 72, 40,
            -22, -22, -48, -23, -11, 88, 249, 13,
            -141, -3, -42, 52, -85, 64, 64, 95,
            4, 79, 7, 68, 61, 62, 143, -18,
            -23, 8, -1, -36, 28, 69, 6, 28,
            -219, 21, 5, 35, 64, -82, 100, 90,
            -88, 153, -24, -702, -38, 31, 95, 114 //
        },
        {
            -43, 17, -12, 44, 19, 58, 129, 43,
            -19, -36, -14, -36, -30, 27, 40, 93,
            -15, -37, -14, -13, 18, 86, 88, 66,
            -39, -26, -19, -11, -7, 4, 1, 21,
            -24, -26, -23, -24, -7, -8, 1, 10,
            -20, -18, -24, -20, -20, -12, 6, 3,
            -21, -16, -6, 2, -0, 12, 2, -10,
            -19, -20, -6, -3, -2, -29, -24, -37 //
        },
        {
            -84, 205, 93, -292, -294, -88, -151, 2,
            28, -151, 26, -58, -148, -114, 86, -144,
            85, 43, 215, 58, 42, -247, -96, 66,
            -28, 28, -134, 6, -6, 228, -56, 190,
            -69, -68, -18, 101, 200, 18, -3, -48,
            132, -102, 46, 159, 65, 152, 59, -24,
            55, 65, 77, 17, -29, 25, 205, -14,
            -98, -47, 27, 99, -203, -73, 53, -71 //
        },
        {
            -68, -86, 21, 3, -9, 91, 211, -132,
            -138, -141, -76, -47, 85, 96, 44, 111,
            -69, -158, 102, -14, 158, 179, 196, 101,
            -196, -160, -33, 30, 59, 74, 66, 115,
            -32, -76, -20, 36, 34, 13, 8, -41,
            -171, -7, -13, -29, 10, 44, 63, 8,
            -50, -18, -26, 18, 38, -38, -21, -1,
            -139, -19, -49, -3, 11, 52, -21, 26 //
        },
        {
            -151, -155, -15, 32, 47, 67, 37, 186,
            14, -166, 60, 40, -49, 33, 32, 22,
            -367, 49, 42, -28, 21, 40, 69, 38,
            -7, -25, 54, 68, 62, 105, 68, 109,
            -271, 73, 8, 104, 83, 66, -2, 95,
            -44, -36, 70, 17, 172, 129, 114, 202,
            -58, -19, -114, 50, -32, 100, 102, 88,
            -212, -350, -189, -137, -10, -164, -90, -78 //
        },
        {
            97, -119, 150, 78, 90, -47, 164, 25,
            -155, -126, 46, -73, 98, -40, -25, -238,
            -51, 142, -48, 189, -70, 48, -168, -33,
            211, 26, 21, 62, -242, -73, 6, -250,
            181, -183, 56, 109, 173, -114, -170, -2,
            -42, 129, -22, -78, -66, -35, -20, -188,
            -253, 201, -56, 34, -89, -1, 19, 146,
            -84, -167, 113, 25, 391, 268, 313, -287 //
        },
        {
            1, -174, -48, -9, -130, -45, -41, -25,
            -101, -174, -24, 19, 29, -24, 42, 28,
            -108, -64, 29, -8, -29, 70, 38, -78,
            -79, -143, -95, 8, 66, 104, 42, 1,
            -158, -103, 47, -24, 140, 78, 99, 47,
            -93, -166, 35, -16, 20, 204, 207, 52,
            -165, -131, -122, -29, 133, 220, 81, 90,
            40, -189, -124, -61, 204, 256, 322, 27 //
        },
        {
            -22, -60, -48, -17, -2, -1, -17, -25,
            -39, 1, 17, 9, 4, -10, 5, 62,
            -51, -6, -3, -1, -18, -24, -2, 1,
            -3, -32, -4, 16, 13, -17, 9, -3,
            -13, -9, -31, -10, -8, 29, 7, 27,
            -41, 2, -47, 7, 40, 53, 77, 96,
            -15, -76, -49, -60, -16, 4, 18, 86,
            -51, 55, -60, 48, 150, 80, -37, 7 //
        },
        {
            -16, -13, -12, 1, 2, -21, -25, -32,
            -9, -2, 8, -2, 3, 16, 31, 12,
            -18, -9, -11, -12, -16, -2, 15, 7,
            -17, -23, -20, -12, -11, -12, 7, 4,
            -30, -17, -22, -16, -20, -3, 8, 13,
            -13, -17, -15, 4, 24, 73, 64, 46,
            -36, -51, -41, -25, -20, 22, 16, 78,
            -53, -69, -4, 42, 32, 5, 143, 73 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGameQueenTable = {
    {
        {
            -43, -8, 19, 39, 9, 9, -151, -58,
            48, 2, 33, 88, 61, -55, 3, 102,
            26, 48, 59, 59, -8, -79, -107, 20,
            40, 58, -6, 33, 81, 30, 23, -11,
            -35, 12, 40, 31, 10, 22, 16, 13,
            108, 23, 25, 22, 19, 14, -32, 80,
            -63, -16, -33, -11, -7, -33, -27, -75,
            -179, -100, -35, -39, 29, -67, -12, -64 //
        },
        {
            23, 24, 48, 150, 61, 59, -46, 33,
            -19, 28, 49, 106, 123, 19, 24, 53,
            12, 35, 30, -6, 14, 20, -77, -43,
            -17, -3, 19, 67, 44, 37, 10, 27,
            -23, 27, 16, 43, 28, 32, 9, 18,
            -58, -41, 14, -16, -13, 2, -10, 3,
            -52, -93, -103, -58, -44, -1, -112, -66,
            -85, -57, -53, -91, -34, -23, 16, -80 //
        },
        {
            68, -31, 28, 78, -21, 135, 165, 26,
            -15, 130, 6, 223, 212, 58, -75, 0,
            63, 3, 103, -15, 164, -24, -120, 54,
            117, 29, 36, -4, 77, 67, 80, -32,
            80, -42, 75, 15, 38, -77, -188, 114,
            -4, 64, 97, 84, 62, -16, 125, -6,
            179, -98, 31, -7, -49, 113, -168, -113,
            -18, -295, -54, -1149, 24, -64, -233, -106 //
        },
        {
            37, -7, 50, 5, 44, 35, -15, 53,
            7, 27, 40, 69, 102, 51, 26, 18,
            -10, 22, 15, 23, 50, 23, 17, 34,
            1, 4, -1, 3, 25, 39, 82, 36,
            -12, -5, -2, 12, -5, 3, 4, 26,
            -33, -19, 0, -4, -9, -5, -21, -35,
            -34, -25, -36, -36, -40, -87, -72, -63,
            -37, -39, -56, -24, -66, -58, -87, -41 //
        },
        {
            30, -155, -105, 181, 152, -4, 12, -67,
            -34, 80, 1, 76, 118, -25, -90, 77,
            -40, 54, -116, -5, 15, 132, 56, -47,
            40, 1, 75, 35, -5, -143, 29, -153,
            11, 70, 58, -9, -131, -17, -14, 25,
            -52, 66, 28, -65, -2, -117, -68, -16,
            -38, -44, -1, 31, 71, 31, -147, 24,
            -17, -57, 37, -12, 99, 63, -10, 26 //
        },
        {
            0, 77, -6, 43, 71, 42, -106, 144,
            55, 60, 44, 72, 7, 14, 14, -67,
            11, 92, -60, 38, -50, -15, -112, 1,
            41, 65, 13, -36, 2, 8, 34, -37,
            -39, -11, 5, -24, -18, 28, 52, 96,
            19, -68, -7, 4, -5, -53, -60, -28,
            -18, -19, -8, -48, -36, 25, -1, -11,
            19, -87, 5, -26, -48, -59, 31, -67 //
        },
        {
            -4, 102, -39, -73, -48, -84, -73, -202,
            -48, 84, -44, -25, 44, -62, -97, -29,
            215, -67, -23, 24, -19, -59, -77, -2,
            -3, 11, -6, -33, -12, -48, -30, -64,
            176, -83, -20, -44, -50, -15, 1, -26,
            30, 16, -69, 23, -45, -57, -62, -80,
            20, 3, 91, 14, 118, -20, -47, -16,
            119, 231, 171, 121, 60, 136, 46, 52 //
        },
        {
            -134, -12, -59, -28, -69, 64, -104, -129,
            51, 65, 7, 120, -28, 9, -61, 114,
            -65, -103, 62, -88, 54, -35, 40, 103,
            -194, 7, 37, -12, 175, 66, 49, 29,
            -65, 193, -86, -66, -54, 76, 2, 25,
            9, -72, 62, 25, -2, -24, -22, 187,
            174, -152, 97, 58, 193, 18, -49, -234,
            51, 28, -39, 71, -189, -113, -194, 160 //
        },
        {
            -45, 70, -43, -24, 103, 29, -59, -66,
            17, 42, -37, -43, -29, 6, -89, -72,
            22, 26, -67, -16, 45, -67, -75, 61,
            -65, 64, 17, -7, -14, -38, 23, 43,
            85, 26, -80, 21, -51, 5, -11, 42,
            32, 31, -34, 40, 29, -72, -83, 4,
            71, 59, 90, 85, -18, -40, -20, -12,
            -32, 121, 123, 91, -32, -50, -122, -13 //
        },
        {
            -131, -58, -30, -26, -68, -89, -76, -20,
            28, -51, -66, -33, -55, 2, -59, -149,
            18, -6, 9, -25, 16, 0, -31, -47,
            -28, 59, -7, 15, -18, 9, -28, 39,
            -11, 29, 71, 32, 67, -41, 20, 17,
            39, 1, 83, 31, 12, 28, -14, -23,
            -15, 68, 103, 78, 44, 43, 2, -0,
            48, 0, 96, 77, -88, 3, 76, 29 //
        },
        {
            -32, -43, -43, -45, -73, -74, -54, -16,
            -30, -38, -56, -34, -38, -78, -111, -99,
            -39, -31, -20, -24, -17, -22, -37, -30,
            -10, -3, -11, 1, 7, 12, 9, 22,
            12, -5, 11, 14, 37, 46, 38, 48,
            -9, -4, 19, 28, 37, 21, 48, 38,
            20, 33, 58, 57, 89, 65, 29, 15,
            58, 75, 42, 21, 48, 89, -38, 17 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> MiddleGameKingTable = {
    {
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            130, 119, 0, 0, 0, 0, 0, 0,
            97, 120, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 58, 64, 0, 0, 0,
            0, 0, 115, 87, 89, 0, 0, 0,
            0, 0, 165, 0, 143, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 856, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, -346, -306, -314,
            0, 0, 0, 0, 0, -365, -288, -296 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            1187, 1202, 1171, 0, 0, 0, 0, 0,
            1191, 1230, 1182, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 745, 741, 732,
            0, 0, 0, 0, 0, 786, 810, 803,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 746, 741, 726, 730, 0, 0,
            0, 0, 700, 653, 654, 674, 0, 0,
            0, 0, 0, 660, 649, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            1408, 1438, 0, 0, 0, 0, 0, 0,
            1363, 1360, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 852, 835,
            0, 0, 0, 0, 0, 0, 774, 757,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            -266, -252, -269, -323, 0, 0, 0, 0,
            -280, -269, -277, -305, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, -471, -527, -442, -447,
            0, 0, 0, 0, -527, -511, -469, -463,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
    }};

constexpr static std::array<std::array<int, 64>, PSQTBucketCount> EndGameKingTable = {
    {
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            -37, 10, 0, 0, 0, 0, 0, 0,
            -73, -40, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 69, 66, 0, 0, 0,
            0, 0, 17, 25, 26, 0, 0, 0,
            0, 0, -42, 0, -41, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 13, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 64, 42, 7,
            0, 0, 0, 0, 0, 20, -7, -52 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            -66, -12, 31, 0, 0, 0, 0, 0,
            -61, -23, 9, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 84, 55, 6,
            0, 0, 0, 0, 0, 63, 30, -7,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 35, 47, 49, 37, 0, 0,
            0, 0, 60, 91, 89, 65, 0, 0,
            0, 0, 0, 84, 87, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            -81, -38, 0, 0, 0, 0, 0, 0,
            -75, -19, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 31, -5,
            0, 0, 0, 0, 0, 0, 55, 9,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            -80, -45, -25, -14, 0, 0, 0, 0,
            -30, 10, 19, 29, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
        {
            0, 0, 0, 0, -12, 12, -22, -68,
            0, 0, 0, 0, 66, 55, 32, -9,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0 //
        },
    }};

constexpr static std::array<std::array<std::array<int, 64>, PSQTBucketCount>, 6> MiddleGamePositionalWhiteTables = {
    MiddleGamePawnTable,
    MiddleGameKnightTable,
    MiddleGameBishopTable,
    MiddleGameRookTable,
    MiddleGameQueenTable,
    MiddleGameKingTable};

constexpr static std::array<std::array<std::array<int, 64>, PSQTBucketCount>, 6> EndGamePositionalWhiteTables{
    EndGamePawnTable,
    EndGameKnightTable,
    EndGameBishopTable,
    EndGameRookTable,
    EndGameQueenTable,
    EndGameKingTable};

constexpr int PackedPieceValue(int bucket, int piece)
{
    return Pack(PieceValue[bucket][piece], PieceValue[bucket][piece + 5]);
}

constexpr int MiddleGamePositionalTables(int bucket, int piece, int square)
{
    int coefficient = 1;
    if (piece >= 6)
    {
        piece -= 6;
        square ^= 56;
        coefficient = -1;
    }

    return MiddleGamePositionalWhiteTables[piece][bucket][square] * coefficient;
}

constexpr int EndGamePositionalTables(int bucket, int piece, int square)
{
    int coefficient = 1;
    if (piece >= 6)
    {
        piece -= 6;
        square ^= 56;
        coefficient = -1;
    }

    return EndGamePositionalWhiteTables[piece][bucket][square] * coefficient;
}

constexpr int PackedPositionalTables(int bucket, int piece, int square)
{
    int coefficient = 1;
    if (piece >= 6)
    {
        piece -= 6;
        square ^= 56;
        coefficient = -1;
    }

    return Pack(
        MiddleGamePositionalWhiteTables[piece][bucket][square] * coefficient,
        EndGamePositionalWhiteTables[piece][bucket][square] * coefficient);
}

constexpr static std::array<int, 64> File = {
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7,
    0, 1, 2, 3, 4, 5, 6, 7};

constexpr static std::array<u64, 64> FileMasks = {
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL};

constexpr static std::array<u64, 64> IsolatedPawnMasks = {
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
};

constexpr static std::array<u64, 64> WhitePassedPawnMasks = {
    0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL,
    3UL, 7UL, 14UL, 28UL, 56UL, 112UL, 224UL, 192UL,
    771UL, 1799UL, 3598UL, 7196UL, 14392UL, 28784UL, 57568UL, 49344UL,
    197379UL, 460551UL, 921102UL, 1842204UL, 3684408UL, 7368816UL, 14737632UL, 12632256UL,
    50529027UL, 117901063UL, 235802126UL, 471604252UL, 943208504UL, 1886417008UL, 3772834016UL, 3233857728UL,
    12935430915UL, 30182672135UL, 60365344270UL, 120730688540UL, 241461377080UL, 482922754160UL, 965845508320UL, 827867578560UL,
    3311470314243UL, 7726764066567UL, 15453528133134UL, 30907056266268UL, 61814112532536UL, 123628225065072UL, 247256450130144UL, 211934100111552UL,
    847736400446211UL, 1978051601041159UL, 3956103202082318UL, 7912206404164636UL, 15824412808329272UL, 31648825616658544UL, 63297651233317088UL, 54255129628557504UL};

constexpr static std::array<u64, 64> BlackPassedPawnMasks = {
    217020518514230016UL, 506381209866536704UL, 1012762419733073408UL, 2025524839466146816UL, 4051049678932293632UL, 8102099357864587264UL, 16204198715729174528UL, 13889313184910721024UL,
    217020518514229248UL, 506381209866534912UL, 1012762419733069824UL, 2025524839466139648UL, 4051049678932279296UL, 8102099357864558592UL, 16204198715729117184UL, 13889313184910671872UL,
    217020518514032640UL, 506381209866076160UL, 1012762419732152320UL, 2025524839464304640UL, 4051049678928609280UL, 8102099357857218560UL, 16204198715714437120UL, 13889313184898088960UL,
    217020518463700992UL, 506381209748635648UL, 1012762419497271296UL, 2025524838994542592UL, 4051049677989085184UL, 8102099355978170368UL, 16204198711956340736UL, 13889313181676863488UL,
    217020505578799104UL, 506381179683864576UL, 1012762359367729152UL, 2025524718735458304UL, 4051049437470916608UL, 8102098874941833216UL, 16204197749883666432UL, 13889312357043142656UL,
    217017207043915776UL, 506373483102470144UL, 1012746966204940288UL, 2025493932409880576UL, 4050987864819761152UL, 8101975729639522304UL, 16203951459279044608UL, 13889101250810609664UL,
    216172782113783808UL, 504403158265495552UL, 1008806316530991104UL, 2017612633061982208UL, 4035225266123964416UL, 8070450532247928832UL, 16140901064495857664UL, 13835058055282163712UL,
    0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL};

constexpr static std::array<int, 64> Rank = {
    7UL, 7UL, 7UL, 7UL, 7UL, 7UL, 7UL, 7UL,
    6UL, 6UL, 6UL, 6UL, 6UL, 6UL, 6UL, 6UL,
    5UL, 5UL, 5UL, 5UL, 5UL, 5UL, 5UL, 5UL,
    4UL, 4UL, 4UL, 4UL, 4UL, 4UL, 4UL, 4UL,
    3UL, 3UL, 3UL, 3UL, 3UL, 3UL, 3UL, 3UL,
    2UL, 2UL, 2UL, 2UL, 2UL, 2UL, 2UL, 2UL,
    1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL,
    0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL};

const u64 NotAFile = 0xFEFEFEFEFEFEFEFE;

const u64 NotHFile = 0x7F7F7F7F7F7F7F7F;

const int PositiveCheckmateDetectionLimit = 27000;

const int NegativeCheckmateDetectionLimit = -27000;

const int MinEval = NegativeCheckmateDetectionLimit + 1;

const int MaxEval = PositiveCheckmateDetectionLimit - 1;

[[nodiscard]] static u64 ShiftUp(const u64 board)
{
    return board >> 8;
}

[[nodiscard]] static u64 ShiftDown(const u64 board)
{
    return board << 8;
}

[[nodiscard]] static u64 ShiftLeft(const u64 board)
{
    return (board >> 1) & NotHFile;
}

[[nodiscard]] static u64 ShiftRight(const u64 board)
{
    return (board << 1) & NotAFile;
}

[[nodiscard]] static u64 ShiftUpRight(const u64 board)
{
    return ShiftRight(ShiftUp(board));
}

[[nodiscard]] static u64 ShiftUpLeft(const u64 board)
{
    return ShiftLeft(ShiftUp(board));
}

[[nodiscard]] static u64 ShiftDownRight(const u64 board)
{
    return ShiftRight(ShiftDown(board));
}

[[nodiscard]] static u64 ShiftDownLeft(const u64 board)
{
    return ShiftLeft(ShiftDown(board));
}

static void print_psqts_csharp(const parameters_t &parameters, std::array<std::array<tune_t, 12>, PSQTBucketCount> &existingPieceValues)
{
    std::array<std::array<tune_t, 12>, PSQTBucketCount> psqtPieceValues;

    // Extract and print pieces values
    for (int phase = 0; phase <= 1; ++phase)
    {
        if (phase == 0)
            std::cout << "\tinternal static readonly short[][] MiddleGamePieceValues =\n\t[";

        else
            std::cout << "\n\tinternal static readonly short[][] EndGamePieceValues =\n\t[";

        for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
        {
            std::cout << "\n\t\t[\n\t\t\t";

            // Pawns
            {
                tune_t pawnSum = 0;

                for (int square = 0; square < 48; ++square)
                {
                    pawnSum += parameters[48 * bucket + square][phase];
                }

                auto average = (pawnSum / 48.0);
                auto pieceIndex = phase * 6;

                psqtPieceValues[bucket][pieceIndex] = average;
                std::cout << "+" << std::round(average + existingPieceValues[bucket][pieceIndex]) << ", ";
            }

            for (int piece = 1; piece < 5; ++piece)
            {
                tune_t sum = 0;

                for (int square = 0; square < 64; ++square)
                {
                    sum += parameters
                        [(48 * PSQTBucketCount) +               // 64 - 16, since we're only tuning 48 pawn values
                         (64 * PSQTBucketCount) * (piece - 1) + // piece - 1 since we already took pawns into account
                         (64 * bucket) +
                         square]
                        [phase];
                }

                auto average = (sum / 64.0);
                auto pieceIndex = piece + phase * 6;

                // std::cout << std::endl
                //           << existingPieceValues[0][pieceIndex] << "==" << existingPieceValues[1][pieceIndex] << std::endl;

                psqtPieceValues[bucket][pieceIndex] = average;
                std::cout << "+" << std::round(average + existingPieceValues[bucket][pieceIndex]) << ", ";
            }

            // Kings
            auto kingIndex = 5 + phase * 6;
            psqtPieceValues[bucket][kingIndex] = 0;
            std::cout << psqtPieceValues[bucket][kingIndex] + existingPieceValues[bucket][kingIndex] << ",\n\t\t\t";

            for (int piece = 0; piece < 5; ++piece)
            {
                auto pieceIndex = piece + phase * 6;
                std::cout << "-" << std::round(psqtPieceValues[bucket][pieceIndex] + existingPieceValues[bucket][pieceIndex]) << ", ";
            }
            std::cout << std::round(psqtPieceValues[bucket][kingIndex] + existingPieceValues[bucket][kingIndex]) << "\n\t\t],";
        }

        std::cout << "\n\t];\n";
    }

    // Print PSQTs

    std::string names[] = {"Pawn", "Knight", "Bishop", "Rook", "Queen", "King"};

    // Pawns
    {
        const int piece = 0;
        for (int phase = 0; phase <= 1; ++phase)
        {
            for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
            {
                if (bucket == 0)
                {
                    std::cout << "\n\tinternal static readonly short[][] " << (phase == 0 ? "MiddleGame" : "EndGame") << names[piece] << "Table =\n\t[\n";
                }

                std::cout << "\t\t[\n\t\t\t";

                std::cout << "   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\n\t\t\t";

                for (int square = 0; square < 48; ++square)
                {
                    std::cout << std::setw(4) << std::round(parameters[48 * bucket + square][phase] - psqtPieceValues[bucket][phase * 6]) << ",";
                    if (square % 8 == 7)
                        std::cout << "\n\t\t";
                    if (square != 47)
                        std::cout << "\t";
                }
                std::cout << "\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0," << std::endl;
                std::cout << "\t\t],\n";

                if (bucket == PSQTBucketCount - 1)
                {
                    std::cout << "\t];\n";
                }
            }
        }
    }

    for (int piece = 1; piece < 6; ++piece)
    {
        for (int phase = 0; phase <= 1; ++phase)
        {
            for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
            {
                if (bucket == 0)
                {
                    std::cout << "\n\tinternal static readonly short[][] " << (phase == 0 ? "MiddleGame" : "EndGame") << names[piece] << "Table =\n\t[\n";
                }

                std::cout << "\t\t[\n\t\t\t";

                for (int square = 0; square < 64; ++square)
                {
                    std::cout << std::setw(4) << std::round(parameters[(48 * PSQTBucketCount) +               // 64 - 16, since we're only tuning 48 pawn values
                                                                       (64 * PSQTBucketCount) * (piece - 1) + // piece - 1 since we already took pawns into account
                                                                       (64 * bucket) + square][phase] -
                                                            psqtPieceValues[bucket][piece + phase * 6])
                              << ",";
                    if (square % 8 == 7)
                        std::cout << "\n\t\t";
                    if (square != 63)
                        std::cout << "\t";
                }
                std::cout << "],\n";

                if (bucket == PSQTBucketCount - 1)
                {
                    std::cout << "\t];\n";
                }
            }
        }
    }
    std::cout << std::endl;
}

static void print_psqts_cpp(const parameters_t &parameters, std::array<std::array<tune_t, 12>, PSQTBucketCount> &existingPieceValues)
{
    std::array<std::array<tune_t, 12>, PSQTBucketCount> psqtPieceValues;

    std::cout << "constexpr static std::array<std::array<int, 12>, PSQTBucketCount> PieceValue = {\n\t{\n\t";

    // Exctract and print pieces values
    for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
    {
        std::cout << "\t{\n";

        for (int phase = 0; phase <= 1; ++phase)
        {
            std::cout << "\t\t\t";

            // Pawns
            {
                tune_t pawnSum = 0;

                for (int square = 0; square < 48; ++square)
                {
                    pawnSum += parameters[48 * bucket + square][phase];
                }

                auto average = (pawnSum / 48.0);
                auto pieceIndex = phase * 6;

                psqtPieceValues[bucket][pieceIndex] = average;
                std::cout << "+" << std::round(average + existingPieceValues[bucket][pieceIndex]) << ", ";
            }

            for (int piece = 1; piece < 5; ++piece)
            {
                tune_t sum = 0;

                for (int square = 0; square < 64; ++square)
                {
                    sum += parameters
                        [(48 * PSQTBucketCount) +               // 64 - 16, since we're only tuning 48 pawn values
                         (64 * PSQTBucketCount) * (piece - 1) + // piece - 1 since we already took pawns into account
                         (64 * bucket) +
                         square]
                        [phase];
                }

                auto average = (sum / 64.0);
                auto pieceIndex = piece + phase * 6;

                psqtPieceValues[bucket][pieceIndex] = average;
                std::cout << "+" << std::round(average + existingPieceValues[bucket][pieceIndex]) << ", ";
            }

            // Kings
            auto kingIndex = 5 + phase * 6;
            psqtPieceValues[bucket][kingIndex] = 0;
            std::cout << "// " << std::round(existingPieceValues[bucket][kingIndex]) << "\n";
        }
        std::cout << "\t\t},\n\t";
    }

    std::cout << "}};\n";

    // Print PSQTs

    std::string names[] = {"Pawn", "Knight", "Bishop", "Rook", "Queen", "King"};

    // Pawns
    {
        const int piece = 0;
        for (int phase = 0; phase <= 1; ++phase)
        {
            for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
            {
                if (bucket == 0)
                {
                    std::cout << "\nconstexpr static std::array<std::array<int, 64>, PSQTBucketCount> " << (phase == 0 ? "MiddleGame" : "EndGame") << names[piece] << "Table = {\n\t{\n\t";
                }

                std::cout << "\t{\n\t\t\t";

                std::cout << "   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\n\t\t\t";

                for (int square = 0; square < 48; ++square)
                {
                    std::cout << std::setw(4) << std::round(parameters[48 * bucket + square][phase] - psqtPieceValues[bucket][phase * 6]) << ",";
                    if (square % 8 == 7)
                        std::cout << "\n\t\t";
                    if (square != 47)
                        std::cout << "\t";
                }

                std::cout << "\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0,\t   0\t//\n"
                          << std::endl;
                std::cout << "\t\t},\n\t";

                if (bucket == PSQTBucketCount - 1)
                {
                    std::cout << "}};\n";
                }
            }
        }
    }

    for (int piece = 1; piece < 6; ++piece)
    {
        for (int phase = 0; phase <= 1; ++phase)
        {
            for (int bucket = 0; bucket < PSQTBucketCount; ++bucket)
            {
                if (bucket == 0)
                {
                    std::cout << "\nconstexpr static std::array<std::array<int, 64>, PSQTBucketCount> " << (phase == 0 ? "MiddleGame" : "EndGame") << names[piece] << "Table = {\n\t{\n\t";
                }

                std::cout << "\t{\n\t\t\t";

                for (int square = 0; square < 64; ++square)
                {
                    std::cout << std::setw(4) << std::round(parameters[(48 * PSQTBucketCount) +               // 64 - 16, since we're only tuning 48 pawn values
                                                                       (64 * PSQTBucketCount) * (piece - 1) + // piece - 1 since we already took pawns into account
                                                                       (64 * bucket) + square][phase] -
                                                            psqtPieceValues[bucket][piece + phase * 6]); // We substract the 16 non-tuned pawn valeus
                    if (square != 63)
                    {
                        std::cout << ",";

                        if (square % 8 == 7)
                            std::cout << "\n\t\t";

                        std::cout << "\t";
                    }
                }

                std::cout << "\t//\n\t\t},\n\t";

                if (bucket == PSQTBucketCount - 1)
                {
                    std::cout << "}};\n";
                }
            }
        }
    }
    std::cout << std::endl;
}
