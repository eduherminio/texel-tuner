#include <array>
using u64 = uint64_t;

constexpr std::array<int, 12> PieceValue = {
    +73, +275, +249, +359, +788, // 0,
    +109, +356, +324, +653, +1123, // 0,
};

std::array<int, 6> phaseValues = {0, 1, 1, 2, 4, 0};

constexpr static int EvalNormalizationCoefficient = 78;

constexpr static std::array<int, 64> MiddleGamePawnTable =
    {
            0, 0, 0, 0, 0, 0, 0, 0,
            -24, -17, -9, -10, 0, 18, 22, -14,
            -22, -19, -2, 10, 15, 20, 17, 4,
            -19, -12, 3, 15, 21, 24, 1, -2,
            -17, -9, 2, 18, 23, 22, 0, -3,
            -21, -13, -2, 5, 12, 15, 12, 0,
            -24, -14, -13, -9, 2, 13, 13, -20,
            0, 0, 0, 0, 0, 0, 0, 0,
    };

constexpr static std::array<int, 64> EndGamePawnTable =
    {
            0, 0, 0, 0, 0, 0, 0, 0,
            10, 9, 3, -11, 3, 1, -3, -7,
            8, 9, -1, -11, -6, -6, -1, -7,
            20, 14, 1, -16, -14, -10, 6, 0,
            18, 14, -2, -13, -12, -7, 4, -2,
            10, 8, -3, -9, -2, -3, -1, -8,
            12, 9, 7, -13, 6, 4, -1, -4,
            0, 0, 0, 0, 0, 0, 0, 0,
    };

constexpr static std::array<int, 64> MiddleGameKnightTable =
    {
            -111, -27, -42, -31, -16, -19, -20, -71,
            -36, -19, -2, 13, 14, 17, -9, -14,
            -24, 2, 18, 42, 47, 33, 29, -1,
            -6, 22, 33, 47, 47, 47, 34, 15,
            -3, 17, 36, 37, 45, 46, 34, 13,
            -22, 4, 17, 36, 45, 27, 22, -1,
            -33, -9, 4, 11, 12, 12, -6, -15,
            -123, -30, -41, -22, -14, -13, -26, -69,
    };

constexpr static std::array<int, 64> EndGameKnightTable =
    {
            -57, -41, -10, -8, -7, -21, -35, -69,
            -15, -2, 13, 7, 7, 6, -10, -15,
            -6, 11, 25, 27, 27, 13, 5, -12,
            6, 15, 37, 37, 39, 34, 16, -4,
            6, 21, 35, 38, 39, 29, 21, -1,
            -9, 15, 19, 33, 24, 14, 4, -9,
            -24, -1, 4, 9, 4, 3, -12, -16,
            -61, -40, -7, -10, -7, -17, -33, -63,
    };

constexpr static std::array<int, 64> MiddleGameBishopTable =
    {
            -14, 10, -7, -19, -12, -16, -14, 5,
            5, 4, 5, -13, 2, -2, 23, -5,
            -4, 5, -2, 1, -5, 10, 7, 23,
            -2, -6, -6, 14, 12, -13, 3, 1,
            -9, 0, -10, 12, 3, -8, -3, 7,
            4, 4, 5, -5, 3, 4, 8, 20,
            6, 13, 9, -4, -3, -1, 17, 1,
            11, 10, 3, -27, -13, -18, -4, -9,
    };

constexpr static std::array<int, 64> EndGameBishopTable =
    {
            -8, 14, -16, 4, -4, 3, -3, -28,
            -3, -4, -3, 4, 1, -8, -2, -11,
            11, 12, 6, 4, 10, 5, 2, 4,
            10, 8, 7, 0, -1, 7, 3, 1,
            7, 7, 5, 4, -7, 2, 3, 2,
            10, 3, 0, 2, 5, 0, 1, 4,
            -12, -9, -14, 2, 1, 0, 0, -10,
            -8, -10, -13, 4, 6, 4, -1, -16,
    };

constexpr static std::array<int, 64> MiddleGameRookTable =
    {
            -5, -11, -11, -7, 5, -4, 2, -5,
            -22, -9, -10, -10, -1, 0, 14, -3,
            -22, -12, -13, -7, 5, 11, 42, 22,
            -20, -13, -9, -6, 0, 5, 31, 20,
            -14, -10, -5, 1, 0, 9, 23, 18,
            -19, -10, -7, 0, 6, 17, 41, 26,
            -21, -19, -6, -6, -1, 0, 18, -1,
            -4, -6, -5, 2, 11, -1, 7, 6,
    };

constexpr static std::array<int, 64> EndGameRookTable =
    {
            5, 7, 12, 3, -4, 4, 5, -1,
            10, 15, 15, 8, -1, 2, -2, 2,
            6, 4, 6, 2, -7, -8, -18, -19,
            8, 4, 8, 5, -4, -1, -11, -17,
            7, 5, 9, 1, -2, -7, -12, -14,
            7, 10, 1, -5, -9, -11, -17, -13,
            14, 17, 12, 4, -3, 0, -4, 4,
            0, 0, 7, -1, -9, -1, -3, -9,
    };

constexpr static std::array<int, 64> MiddleGameQueenTable =
    {
            -13, -15, -16, -2, -9, -27, 1, -2,
            4, -5, 6, 0, 3, 5, 15, 38,
            -2, -2, -3, -3, -6, 8, 28, 42,
            -4, -12, -9, -4, -5, 0, 13, 22,
            -6, -8, -11, -11, -5, 1, 7, 17,
            -1, -1, -8, -6, -1, 4, 18, 28,
            -7, -15, 3, 8, 5, 0, 9, 29,
            -10, -20, -10, 1, -6, -35, -14, 11,
    };

constexpr static std::array<int, 64> EndGameQueenTable =
    {
            -18, -10, 0, -8, -4, -3, -28, 1,
            -19, -14, -19, -2, -1, -13, -32, -4,
            -13, -4, -1, -2, 14, 14, -10, 6,
            -11, 5, -5, 7, 17, 24, 29, 22,
            0, 0, 6, 16, 14, 18, 18, 33,
            -12, -8, 8, 6, 10, 17, 12, 15,
            -11, -6, -15, -14, -5, -3, -27, 3,
            -7, -4, -1, -8, 3, 21, 13, -6,
    };

constexpr static std::array<int, 64> MiddleGameKingTable =
    {
            19, 27, 4, -74, -15, -64, 14, 32,
            -16, -22, -39, -70, -79, -59, -21, 2,
            -80, -74, -107, -110, -114, -123, -86, -91,
            -116, -115, -135, -165, -160, -149, -150, -173,
            -81, -97, -126, -154, -158, -128, -150, -157,
            -71, -45, -101, -110, -94, -103, -77, -81,
            56, -17, -37, -62, -63, -49, -8, 10,
            28, 45, 11, -64, -4, -54, 27, 43,
    };

constexpr static std::array<int, 64> EndGameKingTable =
    {
            -58, -32, -11, 10, -20, 5, -22, -63,
            -8, 19, 29, 40, 46, 34, 17, -8,
            10, 40, 56, 65, 67, 61, 43, 25,
            19, 52, 72, 87, 83, 75, 64, 44,
            9, 45, 69, 83, 86, 73, 66, 41,
            8, 35, 55, 65, 62, 56, 43, 22,
            -29, 13, 28, 37, 39, 31, 13, -13,
            -66, -39, -14, 5, -17, 2, -26, -67,
    };

constexpr static std::array<std::array<int, 64>, 6> MiddleGamePositionalWhiteTables =
    {
        MiddleGamePawnTable,
        MiddleGameKnightTable,
        MiddleGameBishopTable,
        MiddleGameRookTable,
        MiddleGameQueenTable,
        MiddleGameKingTable};

constexpr static std::array<std::array<int, 64>, 6> EndGamePositionalWhiteTables{
    EndGamePawnTable,
    EndGameKnightTable,
    EndGameBishopTable,
    EndGameRookTable,
    EndGameQueenTable,
    EndGameKingTable};

int MiddleGamePositionalTables(int piece, int square)
{
    int coefficient = 1;
    if (piece >= 6)
    {
        piece -= 6;
        square ^= 56;
        coefficient = -1;
    }

    return MiddleGamePositionalWhiteTables[piece][square] * coefficient;
}

int EndGamePositionalTables(int piece, int square)
{
    int coefficient = 1;
    if (piece >= 6)
    {
        piece -= 6;
        square ^= 56;
        coefficient = -1;
    }

    return EndGamePositionalWhiteTables[piece][square] * coefficient;
}

constexpr static std::array<u64, 64> FileMasks = {
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL,
    72340172838076673UL, 144680345676153346UL, 289360691352306692UL, 578721382704613384UL, 1157442765409226768UL, 2314885530818453536UL, 4629771061636907072UL, 9259542123273814144UL};

constexpr static std::array<u64, 64> IsolatedPawnMasks = {
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
    144680345676153346UL,
    361700864190383365UL,
    723401728380766730UL,
    1446803456761533460UL,
    2893606913523066920UL,
    5787213827046133840UL,
    11574427654092267680UL,
    4629771061636907072UL,
};

constexpr static std::array<u64, 64> WhitePassedPawnMasks = {
    0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL,
    3UL, 7UL, 14UL, 28UL, 56UL, 112UL, 224UL, 192UL,
    771UL, 1799UL, 3598UL, 7196UL, 14392UL, 28784UL, 57568UL, 49344UL,
    197379UL, 460551UL, 921102UL, 1842204UL, 3684408UL, 7368816UL, 14737632UL, 12632256UL,
    50529027UL, 117901063UL, 235802126UL, 471604252UL, 943208504UL, 1886417008UL, 3772834016UL, 3233857728UL,
    12935430915UL, 30182672135UL, 60365344270UL, 120730688540UL, 241461377080UL, 482922754160UL, 965845508320UL, 827867578560UL,
    3311470314243UL, 7726764066567UL, 15453528133134UL, 30907056266268UL, 61814112532536UL, 123628225065072UL, 247256450130144UL, 211934100111552UL,
    847736400446211UL, 1978051601041159UL, 3956103202082318UL, 7912206404164636UL, 15824412808329272UL, 31648825616658544UL, 63297651233317088UL, 54255129628557504UL};

constexpr static std::array<u64, 64> BlackPassedPawnMasks = {
    217020518514230016UL, 506381209866536704UL, 1012762419733073408UL, 2025524839466146816UL, 4051049678932293632UL, 8102099357864587264UL, 16204198715729174528UL, 13889313184910721024UL,
    217020518514229248UL, 506381209866534912UL, 1012762419733069824UL, 2025524839466139648UL, 4051049678932279296UL, 8102099357864558592UL, 16204198715729117184UL, 13889313184910671872UL,
    217020518514032640UL, 506381209866076160UL, 1012762419732152320UL, 2025524839464304640UL, 4051049678928609280UL, 8102099357857218560UL, 16204198715714437120UL, 13889313184898088960UL,
    217020518463700992UL, 506381209748635648UL, 1012762419497271296UL, 2025524838994542592UL, 4051049677989085184UL, 8102099355978170368UL, 16204198711956340736UL, 13889313181676863488UL,
    217020505578799104UL, 506381179683864576UL, 1012762359367729152UL, 2025524718735458304UL, 4051049437470916608UL, 8102098874941833216UL, 16204197749883666432UL, 13889312357043142656UL,
    217017207043915776UL, 506373483102470144UL, 1012746966204940288UL, 2025493932409880576UL, 4050987864819761152UL, 8101975729639522304UL, 16203951459279044608UL, 13889101250810609664UL,
    216172782113783808UL, 504403158265495552UL, 1008806316530991104UL, 2017612633061982208UL, 4035225266123964416UL, 8070450532247928832UL, 16140901064495857664UL, 13835058055282163712UL,
    0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL};

constexpr static std::array<int, 64> Rank =
    {
        7UL, 7UL, 7UL, 7UL, 7UL, 7UL, 7UL, 7UL,
        6UL, 6UL, 6UL, 6UL, 6UL, 6UL, 6UL, 6UL,
        5UL, 5UL, 5UL, 5UL, 5UL, 5UL, 5UL, 5UL,
        4UL, 4UL, 4UL, 4UL, 4UL, 4UL, 4UL, 4UL,
        3UL, 3UL, 3UL, 3UL, 3UL, 3UL, 3UL, 3UL,
        2UL, 2UL, 2UL, 2UL, 2UL, 2UL, 2UL, 2UL,
        1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL, 1UL,
        0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL, 0UL};

